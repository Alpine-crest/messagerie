assets
assets/app-config.php

<?php
header('Content-Type: application/javascript');
session_start();
$contact_username = $_GET['contact'] ?? '';
$csrf_token = $_SESSION['csrf_token'] ?? '';
$username = $_SESSION['username'] ?? '';
?>
window.APP_CHAT = {
    contact: "<?php echo addslashes($contact_username); ?>",
    myUsername: "<?php echo addslashes($username); ?>",
    csrfToken: "<?php echo addslashes($csrf_token); ?>"
};


assets/remove-contact.js

document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.remove-contact').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
            if(!confirm('Retirer ce contact ?')) {
                e.preventDefault();
            }
        });
    });
});


assets/script.js

document.addEventListener('DOMContentLoaded', function() {
    const messagesDiv = document.getElementById('chat-messages');
    const msgInput = document.getElementById('message-input');
    const form = document.getElementById('chat-form');
    const errorDiv = document.getElementById('chat-error');
    const toInput = document.getElementById('chat-to');
    const csrfInput = document.getElementById('csrf-token');

    function getCsrfToken() {
        // Toujours lire la valeur du champ caché ! (c'est la source de vérité)
        return csrfInput ? csrfInput.value : '';
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.innerText = text;
        return div.innerHTML;
    }

    function showError(msg) {
        if (errorDiv) {
            errorDiv.textContent = msg;
            errorDiv.style.display = '';
            setTimeout(() => { errorDiv.style.display = 'none'; }, 4000);
        } else {
            alert(msg);
        }
    }

    function loadMessages() {
        const contact = window.APP_CHAT ? window.APP_CHAT.contact : '';
        const myUsername = window.APP_CHAT ? window.APP_CHAT.myUsername : '';
        if (!contact || !messagesDiv) {
            messagesDiv.innerHTML = "<i>Sélectionnez un contact pour discuter.</i>";
            return;
        }
        fetch('messages_api.php?contact=' + encodeURIComponent(contact), {
            credentials: "same-origin"
        })
            .then(r => r.json())
            .then(data => {
                messagesDiv.innerHTML = "";
                if (data.messages) {
                    data.messages.forEach(msg => {
                        const el = document.createElement('div');
                        el.className = 'msg' + (msg.sender_username === myUsername ? ' self' : '');
                        el.innerHTML = `<b>${escapeHtml(msg.sender_username)}:</b> ${escapeHtml(msg.content)} <span class="date">${escapeHtml(msg.sent_at)}</span>`;
                        messagesDiv.appendChild(el);
                    });
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                } else if (data.error) {
                    showError(data.error);
                }
            })
            .catch(() => { showError("Erreur de connexion ou d'accès aux messages."); });
    }

    // Rafraîchissement périodique
    setInterval(loadMessages, 2000);
    loadMessages();

    // Envoi AJAX du message avec CSRF dynamique
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            errorDiv && (errorDiv.style.display = "none");
            const formData = new FormData(form);
            formData.set('csrf_token', getCsrfToken());
            fetch('send_message.php', {
                method: 'POST',
                credentials: "same-origin",
                body: formData
            }).then(async response => {
                if (response.ok) {
                    let data = {};
                    try { data = await response.json(); } catch (e) {}
                    // Nouveau token CSRF pour le prochain envoi
                    if (data.csrf_token) {
                        csrfInput.value = data.csrf_token;
                        window.APP_CHAT.csrfToken = data.csrf_token;
                    }
                    msgInput.value = '';
                    loadMessages();
                } else {
                    let txt = await response.text();
                    showError(txt || "Erreur lors de l'envoi.");
                }
            }).catch(() => {
                showError("Erreur réseau.");
            });
        });
    }
});

assets/style.css

body {
    font-family: Arial, sans-serif;
    margin: 0; padding: 0;
    background: #f5f5f5;
}
.container {
    max-width: 400px;
    margin: 60px auto;
    background: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 8px #ccc;
}
.center { text-align: center; }
.small { max-width: 350px; }
h1, h2 { color: #2d445c; }
a { color: #2980b9; text-decoration: none; }
a.btn, button.btn {
    background: #2980b9;
    color: #fff;
    padding: 10px 24px;
    border: none;
    border-radius: 4px;
    margin: 6px 2px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
}
a.btn.small, button.btn.small { padding: 6px 12px; font-size: 0.9em; }
.actions { margin: 20px 0; }
.error { color: #fff; background: #e74c3c; padding: 8px; margin-bottom: 15px; border-radius: 4px; }
.main-layout {
    display: flex;
    min-height: 100vh;
}
.sidebar {
    width: 220px;
    background: #222c37;
    color: #fff;
    padding: 30px 18px 18px 18px;
}
.sidebar h2 { color: #fff; font-size: 1.3em; }
.contact-list { list-style: none; padding: 0; }
.contact-list li { margin: 10px 0; }
.contact-list a { color: #fff; }
.content {
    flex: 1;
    background: #fff;
    padding: 30px;
    border-left: 2px solid #eaeaea;
}
.logout-btn {
    float: right;
    background: #e74c3c;
    color: #fff;
    padding: 6px 16px;
    border-radius: 4px;
    text-decoration: none;
    margin-top: -8px;
}
.chat-messages {
    max-height: 400px;
    overflow-y: auto;
    background: #fafafa;
    padding: 1em;
    margin-bottom: 1em;
    border: 1px solid #ddd;
}
.msg.self { background: #e0ffe0; padding: 3px 6px; border-radius: 5px; margin: 2px 0; }
.msg { margin: 2px 0; }
.date { color: #888; font-size: 0.8em; margin-left: 5px; }
.send-form, .chat-form {
    display: flex;
    gap: 8px;
}
.chat-form input[type="text"] {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}
.status.online { color: green; font-size: 0.9em; margin-left: 7px; }
.status.offline { color: #aaa; font-size: 0.9em; margin-left: 7px; }
.remove-contact { margin-left: 8px; color: #a00; text-decoration: none; }
.add-contact-form { margin-top: 1em; }

.hidden { display: none !important; }

assets/xion-auth.css

:root {
    --bg: #0d1117;
    --panel: #161b22;
    --border: #30363d;
    --text: #c9d1d9;
    --accent: #388bfd;
    --red: #ff6363;
    --muted: #8b949e;
}
body {
    background: var(--bg);
    color: var(--text);
    font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
    margin: 0;
    min-height: 100vh;
}
.xion-auth-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 2.2em;
    margin: 2em auto;
    max-width: 1100px;
    flex-wrap: wrap;
}
.xion-auth-panel {
    background: var(--panel);
    border: 1.5px solid var(--border);
    border-radius: 18px;
    padding: 2.3em 2.1em 1.5em 2.1em;
    box-sizing: border-box;
    min-width: 350px;
    max-width: 410px;
    width: 100%;
    margin: 0.7em 0;
    box-shadow: 0 2px 16px #0002;
    display: flex;
    flex-direction: column;
    align-items: center;
}
.xion-auth-title {
    font-size: 2.5em;
    font-weight: 700;
    margin: 0 0 0.1em 0;
    color: #fff;
    letter-spacing: 1px;
    text-align: center;
}
.xion-auth-subtitle {
    font-size: 2em;
    font-weight: 600;
    margin: 0 0 1.25em 0;
    color: #e6e6e6;
    text-align: center;
}
.xion-auth-error {
    color: var(--red);
    font-size: 1.17em;
    margin-bottom: 1em;
    width: 100%;
    text-align: center;
    font-weight: 500;
}
.xion-auth-panel form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1.1em;
    margin-bottom: 1.3em;
}
.xion-auth-input-group {
    display: flex;
    align-items: center;
    background: transparent;
    border: 1.5px solid var(--border);
    border-radius: 8px;
    padding: 0.4em 0.8em;
    margin-bottom: 0;
}
.xion-auth-icon {
    margin-right: 0.7em;
    display: flex;
    align-items: center;
    color: var(--muted);
}
.xion-auth-input-group input {
    background: transparent;
    border: none;
    outline: none;
    color: var(--text);
    font-size: 1.14em;
    padding: 0.5em 0;
    width: 100%;
    font-family: inherit;
    letter-spacing: 0.2px;
}
.xion-auth-input-group input::placeholder {
    color: var(--muted);
    opacity: 1;
    font-size: 1.07em;
}
.xion-auth-btn {
    width: 100%;
    background: transparent;
    color: #e6e6e6;
    border: 1.5px solid var(--border);
    border-radius: 8px;
    padding: 0.83em 0;
    font-size: 1.14em;
    font-weight: 600;
    margin-top: 0.2em;
    cursor: pointer;
    transition: background 0.2s, color 0.2s, border-color 0.2s;
    letter-spacing: 0.7px;
}
.xion-auth-btn:hover, .xion-auth-btn:focus {
    background: var(--accent);
    color: #fff;
    border-color: var(--accent);
}
.xion-auth-hint {
    color: var(--muted);
    font-size: 1em;
    display: flex;
    align-items: center;
    margin-top: 1.4em;
    width: 100%;
}
.xion-auth-hint .xion-auth-icon {
    margin-right: 0.55em;
}
.xion-nav-link {
    color: var(--accent);
    text-decoration: none;
    font-weight: 500;
    font-size: 1.04em;
    transition: color .2s;
    margin: 0 0.2em;
}
.xion-nav-link:hover { text-decoration: underline; }
@media (max-width: 900px) {
    .xion-auth-container {
        flex-direction: column;
        align-items: center;
        gap: 1.3em;
    }
    .xion-auth-panel {
        min-width: 260px;
        max-width: 99vw;
        padding: 1.5em 1.1em 1.2em 1.1em;
    }
}

assets/xion.css

:root {
    --bg: #0d1117;
    --panel: #161b22;
    --border: #30363d;
    --text: #c9d1d9;
    --accent: #388bfd;
    --accent-hover: #2563eb;
    --btn: #21262d;
    --btn-hover: #30363d;
    --card-bg: #161b22;
    --card-border: #30363d;
    --muted: #8b949e;
}
body {
    background: var(--bg);
    color: var(--text);
    font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
    margin: 0;
    min-height: 100vh;
}
.xion-header {
    background: var(--panel);
    border-bottom: 1px solid var(--border);
    padding: 0.5em 0;
}
.xion-header__container {
    max-width: 1020px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.xion-logo {
    font-weight: bold;
    font-size: 1.5em;
    color: #fff;
    letter-spacing: 1px;
}
.xion-nav-link {
    color: var(--text);
    margin-left: 2em;
    text-decoration: none;
    font-weight: 500;
    transition: color .2s;
}
.xion-nav-link:hover { color: var(--accent); }

.xion-main {
    max-width: 1020px;
    margin: 3em auto 0 auto;
    padding: 0 1em;
}
.xion-hero {
    text-align: center;
    margin-bottom: 2em;
}
.xion-title {
    font-size: 2.2em;
    margin-bottom: 0.3em;
    font-weight: 600;
    letter-spacing: -.5px;
}
.xion-slogan {
    color: var(--muted);
    font-size: 1.2em;
    margin-bottom: 2em;
    letter-spacing: .5px;
}
.xion-actions {
    margin: 2em 0 2.5em 0;
}
.xion-btn {
    display: inline-block;
    padding: 0.85em 2.1em;
    border-radius: 6px;
    background: var(--btn);
    color: var(--text);
    border: 1px solid var(--border);
    font-weight: 600;
    text-decoration: none;
    margin: 0 0.7em 1em 0;
    transition: background .2s, color .2s, border-color .2s;
    cursor: pointer;
    font-size: 1em;
}
.xion-btn--primary {
    background: var(--accent);
    border-color: var(--accent-hover);
    color: #fff;
}
.xion-btn--primary:hover, .xion-btn--primary:focus {
    background: var(--accent-hover);
    color: #fff;
}
.xion-btn:hover, .xion-btn:focus {
    background: var(--btn-hover);
    color: var(--accent);
    border-color: var(--accent-hover);
}
.xion-info {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5em;
    justify-content: center;
    margin-bottom: 3em;
}
.xion-card {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1.5em 2em 1.1em 2em;
    min-width: 220px;
    max-width: 320px;
    flex: 1 1 250px;
    margin: 0.5em;
    text-align: center;
    box-shadow: 0 2px 8px #0002;
}
.xion-card-icon {
    margin-bottom: 0.6em;
}
.xion-card h2 { margin-top: 0; color: #fff; font-size: 1.1em; font-weight: 600; }
.xion-card p { color: var(--muted); font-size: 1em; margin: 0.5em 0 0 0; }
.xion-footer {
    text-align: center;
    color: var(--muted);
    background: var(--panel);
    padding: 1.2em 0 0.7em 0;
    border-top: 1px solid var(--border);
    margin-top: 4em;
    font-size: 0.97em;
    display: flex;
    gap: 1.7em;
    justify-content: center;
}
.xion-footer-link {
    color: var(--muted);
    text-decoration: none;
    margin: 0 1em;
    transition: color .2s;
}
.xion-footer-link:hover { color: var(--accent); }

@media (max-width: 900px) {
    .xion-main, .xion-header__container { max-width: 98vw; }
    .xion-info { flex-direction: column; align-items: center; }
}

includes
includes/auth.php

<?php
$host = 'localhost';
$dbname = 'messagerie';
$user = 'root';
$pass = ''; // Modifie selon ton installation

$options = [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES => false,
    PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"
];
try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $user, $pass, $options);
} catch (PDOException $e) {
    // Journalise mais ne révèle jamais en prod
    error_log("DB Connection error: " . $e->getMessage());
    die("Erreur de connexion à la base de données.");
}
?>

includes/db.php

<?php
$host = '127.0.0.1';
$dbname = 'messagerie';
$user = 'marius';
$pass = 'mon site s appelle xion'; // Modifie selon ton installation

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Erreur de connexion : " . $e->getMessage());
}
?>

includes/functions.php

<?php
// Fonction sanitize centrale
function sanitize($data) {
    return htmlspecialchars(trim($data), ENT_QUOTES, 'UTF-8');
}
?>

includes/security.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Referrer-Policy: no-referrer');
header('X-XSS-Protection: 1; mode=block');
header('Strict-Transport-Security: max-age=31536000; includeSubDomains; preload');
?>

chat.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header("Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; base-uri 'none'; form-action 'self';");

if (empty($_SESSION['user_id']) || empty($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}
$user_id = $_SESSION['user_id'];
$username = htmlspecialchars($_SESSION['username']);

// Met à jour le statut actif
$stmt = $pdo->prepare('UPDATE users SET last_active = NOW() WHERE id = ?');
$stmt->execute([$user_id]);

// Récupère contacts + statuts
$stmt = $pdo->prepare(
    "SELECT u.id, u.username, u.last_active
     FROM contacts c
     JOIN users u ON c.contact_id = u.id
     WHERE c.user_id = ?
     ORDER BY u.username ASC"
);
$stmt->execute([$user_id]);
$contacts = $stmt->fetchAll(PDO::FETCH_ASSOC);

function is_online($last_active) {
    if (!$last_active) return false;
    return (strtotime($last_active) > (time() - 120));
}

$contact_username = $_GET['user'] ?? '';
if ($contact_username && !in_array($contact_username, array_column($contacts, 'username'))) {
    header('Location: chat.php');
    exit;
}

// Génére le token CSRF UNIQUEMENT si non présent (jamais à chaque GET !)
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}
$csrf_token = $_SESSION['csrf_token'];
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Chat - Messagerie</title>
    <link rel="stylesheet" href="assets/style.css">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
<div class="main-layout">
    <aside class="sidebar">
        <h2>Contacts</h2>
        <ul class="contact-list">
            <?php if ($contacts): ?>
                <?php foreach ($contacts as $contact): ?>
                    <li>
                        <a href="chat.php?user=<?php echo urlencode($contact['username']); ?>"
                           <?php if ($contact['username'] === $contact_username) echo 'class="selected"'; ?>>
                            <?php echo htmlspecialchars($contact['username']); ?>
                        </a>
                        <span class="status <?php echo is_online($contact['last_active']) ? 'online' : 'offline'; ?>">
                            <?php echo is_online($contact['last_active']) ? '● En ligne' : '○ Hors ligne'; ?>
                        </span>
                        <a href="contacts_action.php?action=remove&contact=<?php echo urlencode($contact['username']); ?>"
                           class="remove-contact" data-contact="<?php echo htmlspecialchars($contact['username']); ?>">🗑️</a>
                    </li>
                <?php endforeach; ?>
            <?php else: ?>
                <li>Aucun contact trouvé.</li>
            <?php endif; ?>
        </ul>
        <form action="contacts_action.php" method="get" class="add-contact-form" autocomplete="off">
            <input type="hidden" name="action" value="add">
            <input type="text" name="contact" placeholder="Ajouter un pseudo" required pattern="[a-zA-Z0-9_]{3,50}">
            <button type="submit">Ajouter</button>
        </form>
    </aside>
    <section class="content">
        <header>
            <h1>Chat avec <?php echo htmlspecialchars($contact_username ?: "…"); ?></h1>
            <a href="logout.php" class="logout-btn">Déconnexion</a>
        </header>
        <div id="chat-messages" class="chat-messages" aria-live="polite"></div>
        <form id="chat-form" class="chat-form" method="post" action="send_message.php" autocomplete="off" novalidate>
            <input type="hidden" name="to" id="chat-to" value="<?php echo htmlspecialchars($contact_username); ?>">
            <input type="hidden" name="csrf_token" id="csrf-token" value="<?php echo htmlspecialchars($csrf_token); ?>">
            <input type="text" name="message" id="message-input" maxlength="2000" placeholder="Ecris ton message..." required autocomplete="off">
            <button type="submit">Envoyer</button>
        </form>
        <div id="chat-error" class="error hidden"></div>
    </section>
</div>
<!-- Initialisation de la config JS dans un fichier séparé -->
<script src="assets/app-config.js"></script>
<script src="assets/script.js"></script>
<script src="assets/remove-contact.js"></script>
<script src="assets/app-config.js?contact=<?php echo urlencode($contact_username); ?>"></script>
</body>
</html>

contacts_action.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

if (empty($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}
$user_id = $_SESSION['user_id'];
$action = $_GET['action'] ?? '';
$contact_username = trim($_GET['contact'] ?? '');

if (!$contact_username || !preg_match('/^[a-zA-Z0-9_]{3,50}$/', $contact_username)) {
    header('Location: home.php?error=Contact invalide');
    exit;
}

// Récupère l'ID du contact
$stmt = $pdo->prepare('SELECT id FROM users WHERE username = ?');
$stmt->execute([$contact_username]);
$contact = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$contact) {
    header('Location: home.php?error=Utilisateur inconnu');
    exit;
}

$contact_id = $contact['id'];

if ($action === 'add') {
    // Ne pas ajouter deux fois le même contact
    $stmt = $pdo->prepare('SELECT 1 FROM contacts WHERE user_id = ? AND contact_id = ?');
    $stmt->execute([$user_id, $contact_id]);
    if (!$stmt->fetch()) {
        $stmt = $pdo->prepare('INSERT INTO contacts (user_id, contact_id) VALUES (?, ?)');
        $stmt->execute([$user_id, $contact_id]);
    }
    header('Location: home.php?success=Contact ajouté');
    exit;
}

if ($action === 'remove') {
    $stmt = $pdo->prepare('DELETE FROM contacts WHERE user_id = ? AND contact_id = ?');
    $stmt->execute([$user_id, $contact_id]);
    header('Location: home.php?success=Contact supprimé');
    exit;
}

header('Location: home.php');
exit;
?>

database.sql

-- Table des utilisateurs
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    encryption_key VARCHAR(255) NOT NULL,
    last_active DATETIME DEFAULT NULL
);

-- Table des contacts (amis)
CREATE TABLE contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    contact_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (contact_id) REFERENCES users(id)
);

-- Table des messages    -- Pour le chiffrement, tu peux aussi stocker iv 
CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    receiver_id INT NOT NULL,
    content TEXT NOT NULL,
    sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    iv VARCHAR(32) DEFAULT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (receiver_id) REFERENCES users(id)
);

home.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Content-Security-Policy: default-src \'self\';');

if (empty($_SESSION['user_id']) || empty($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}
$username = htmlspecialchars($_SESSION['username']);

$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare(
    "SELECT u.id, u.username, u.last_active
     FROM contacts c
     JOIN users u ON c.contact_id = u.id
     WHERE c.user_id = ?"
);
$stmt->execute([$user_id]);
$contacts = $stmt->fetchAll(PDO::FETCH_ASSOC);

function is_online($last_active) {
    if (!$last_active) return false;
    return (strtotime($last_active) > (time() - 120));
}
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Accueil - Messagerie</title>
    <link rel="stylesheet" href="assets/style.css">
</head>
<body>
<div class="main-layout">
    <aside class="sidebar">
        <h2>Contacts</h2>
        <ul class="contact-list">
          <?php if ($contacts): ?>
              <?php foreach ($contacts as $contact): ?>
                 <li>
                        <a href="chat.php?user=<?php echo urlencode($contact['username']); ?>">
                            <?php echo htmlspecialchars($contact['username']); ?>
                        </a>
                        <span class="status <?php echo is_online($contact['last_active']) ? 'online' : 'offline'; ?>">
                            <?php echo is_online($contact['last_active']) ? '● En ligne' : '○ Hors ligne'; ?>
                     </span>
                     <a href="contacts_action.php?action=remove&contact=<?php echo urlencode($contact['username']); ?>" class="remove-contact" onclick="return confirm('Retirer ce contact ?');">🗑️</a>
                 </li>
              <?php endforeach; ?>
          <?php else: ?>
             <li>Aucun contact trouvé.</li>
          <?php endif; ?>
        </ul>
        <form action="contacts_action.php" method="get" class="add-contact-form" autocomplete="off">
          <input type="hidden" name="action" value="add">
          <input type="text" name="contact" placeholder="Ajouter un pseudo" required pattern="[a-zA-Z0-9_]{3,50}">
            <button type="submit">Ajouter</button>
        </form>
    </aside>
    <section class="content">
        <header>
            <h1>Bonjour, <?php echo $username; ?> !</h1>
            <a href="logout.php" class="logout-btn">Déconnexion</a>
        </header>
        <div class="welcome">
            <p>Ceci est la page d'accueil après connexion. Sélectionne un contact pour discuter !</p>
        </div>
    </section>
</div>
</body>
</html>

index.php

<?php
session_start();
if (isset($_SESSION['user_id'])) {
    header('Location: home.php');
    exit;
}
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Xion — Messagerie Sécurisée</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="assets/xion.css">
</head>
<body>
<header class="xion-header">
    <div class="xion-header__container">
        <span class="xion-logo">Xion</span>
        <nav>
            <a href="login.php" class="xion-nav-link">Connexion</a>
            <a href="register.php" class="xion-nav-link">Inscription</a>
        </nav>
    </div>
</header>
<main class="xion-main">
    <section class="xion-hero">
        <h1 class="xion-title">Bienvenue sur <span class="xion-logo">Xion</span></h1>
        <p class="xion-desc">La messagerie privée, rapide et ultra-sécurisée.<br>
        Chiffrement de bout en bout, confidentialité garantie, inspiration GitHub.</p>
        <div class="xion-actions">
            <a class="xion-btn xion-btn--primary" href="register.php">Créer un compte</a>
            <a class="xion-btn" href="login.php">Déjà inscrit ? Connexion</a>
        </div>
    </section>
    <section class="xion-info">
        <div class="xion-card">
            <h2>🔒 Sécurité avant tout</h2>
            <p>Vos messages sont chiffrés et ne sont visibles que par vous et vos contacts.</p>
        </div>
        <div class="xion-card">
            <h2>⚡ Simplicité</h2>
            <p>Une interface épurée, inspirée de GitHub, pour rester concentré sur l’essentiel : vos discussions.</p>
        </div>
        <div class="xion-card">
            <h2>🌙 Look moderne</h2>
            <p>Mode sombre, responsive, agréable de jour comme de nuit.</p>
        </div>
    </section>
</main>
<footer class="xion-footer">
    <span>&copy; 2025 Xion</span>
</footer>
</body>
</html>

login.php

<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once 'includes/db.php';           // Connexion PDO d'abord !
require_once 'includes/security.php';     // (Optionnel) Mettre ici si dépend de la base

session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);

// Headers de sécurité
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Referrer-Policy: no-referrer');

if (!isset($_SESSION['login_attempts'])) $_SESSION['login_attempts'] = 0;
if (!isset($_SESSION['last_login_attempt'])) $_SESSION['last_login_attempt'] = time();

if ($_SESSION['login_attempts'] >= 5 && (time() - $_SESSION['last_login_attempt'] < 180)) {
    die('Trop de tentatives, réessayez dans 3 minutes.');
}

// Met à jour last_active si déjà connecté
if (!empty($_SESSION['user_id'])) {
    $stmt = $pdo->prepare('UPDATE users SET last_active = NOW() WHERE id = ?');
    $stmt->execute([$_SESSION['user_id']]);
    header('Location: home.php');
    exit;
}

$error = $_GET['error'] ?? '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // CSRF
    if (!isset($_POST['csrf_token'], $_SESSION['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
        header('Location: login.php?error=Session expirée, veuillez réessayer.');
        exit;
    }
    unset($_SESSION['csrf_token']);

    // Validation/sanitation
    function sanitize($data) {
        return htmlspecialchars(trim($data), ENT_QUOTES, 'UTF-8');
    }
    $username = sanitize($_POST['username'] ?? '');
    $password = $_POST['password'] ?? '';

    if (!$username || !$password) {
        header('Location: login.php?error=Identifiants manquants');
        exit;
    }

    // Recherche utilisateur
    $stmt = $pdo->prepare('SELECT id, username, password FROM users WHERE LOWER(username) = LOWER(?)');
    $stmt->execute([$username]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user && password_verify($password, $user['password'])) {
        // Réinitialise la session (anti-fixation)
        session_regenerate_id(true);
        $_SESSION['user_id'] = $user['id'];
        $_SESSION['username'] = $user['username'];
        $_SESSION['login_attempts'] = 0; // Reset tentative si succès
        header('Location: home.php');
        exit;
    } else {
        $_SESSION['login_attempts']++;
        $_SESSION['last_login_attempt'] = time();
        header('Location: login.php?error=Mauvais identifiants');
        exit;
    }
}

// Nouveau token CSRF
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Xion – Connexion</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="assets/xion-auth.css">
</head>
<body>
<div class="xion-auth-container">
    <div class="xion-auth-panel">
        <h1 class="xion-auth-title">Xion</h1>
        <h2 class="xion-auth-subtitle">Se connecter</h2>
        <?php if (isset($error) && $error): ?>
        <div class="xion-auth-error"><?= htmlspecialchars($error) ?></div>
        <?php endif; ?>
        <form method="post" autocomplete="off">
            <input type="hidden" name="csrf_token" value="<?= htmlspecialchars($_SESSION['csrf_token']) ?>">
            <div class="xion-auth-input-group">
                <span class="xion-auth-icon">
                    <svg width="22" height="22" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="7" r="4"/><path d="M17 19a6 6 0 0 0-12 0"/></svg>
                </span>
                <input type="text" name="username" placeholder="Pseudo" autocomplete="username" required>
            </div>
            <div class="xion-auth-input-group">
                <span class="xion-auth-icon">
                    <svg width="22" height="22" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="10" width="16" height="9" rx="2"/><path d="M7 10V7a4 4 0 0 1 8 0v3"/></svg>
                </span>
                <input type="password" name="password" placeholder="Mot de passe" autocomplete="current-password" required>
            </div>
            <button class="xion-auth-btn" type="submit">Se connecter</button>
        </form>
        <div class="xion-auth-hint">
            <span class="xion-auth-icon">
                <svg width="20" height="20" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="8" width="14" height="9" rx="2"/><path d="M7 8V6a3 3 0 0 1 6 0v2"/></svg>
            </span>
            <span>Trop de tentatives entraînera un verrouillage</span>
        </div>
        <div style="margin-top:1.5em;">
            <a href="register.php" class="xion-nav-link">Créer un compte</a>
        </div>
    </div>
</div>
</body>
</html>

logout.php

<?php
session_start();
// Purge complète session/cookie
$_SESSION = [];
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params['path'], $params['domain'],
        $params['secure'], $params['httponly']
    );
}
session_destroy();
header('Location: index.php');
exit;
?>

messages_api.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Content-Security-Policy: default-src \'none\';');
header('Content-Type: application/json');

// Authentification stricte
if (empty($_SESSION['user_id'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Non autorisé']);
    exit;
}

$user_id = $_SESSION['user_id'];
$contact_username = $_GET['contact'] ?? '';

// Vérification que le contact existe ET est bien dans la liste
$stmt = $pdo->prepare('SELECT u.id, u.encryption_key, u.username FROM users u JOIN contacts c ON u.id = c.contact_id WHERE u.username = ? AND c.user_id = ?');
$stmt->execute([$contact_username, $user_id]);
$contact = $stmt->fetch(PDO::FETCH_ASSOC);
if (!$contact) {
    http_response_code(404);
    echo json_encode(['error' => 'Contact inconnu ou non autorisé']);
    exit;
}
$contact_id = $contact['id'];

// Clé du user courant
$stmt = $pdo->prepare('SELECT encryption_key, username FROM users WHERE id = ?');
$stmt->execute([$user_id]);
$self = $stmt->fetch(PDO::FETCH_ASSOC);
$self_key = base64_decode($self['encryption_key']);
$contact_key = base64_decode($contact['encryption_key']);

// Récupère les messages uniquement entre user et contact
$stmt = $pdo->prepare(
    "SELECT m.id, m.sender_id, u.username AS sender_username, m.content, m.iv, m.sent_at
     FROM messages m
     JOIN users u ON m.sender_id = u.id
     WHERE (m.sender_id = :u1 AND m.receiver_id = :u2)
        OR (m.sender_id = :u2 AND m.receiver_id = :u1)
     ORDER BY m.sent_at ASC"
);
$stmt->execute(['u1' => $user_id, 'u2' => $contact_id]);
$messages = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Déchiffre chaque message
foreach ($messages as &$msg) {
    $key = ($msg['sender_id'] == $user_id) ? $contact_key : $self_key;
    $iv = base64_decode($msg['iv']);
    $ciphertext = base64_decode($msg['content']);
    $decrypted = openssl_decrypt($ciphertext, 'AES-256-CBC', $key, OPENSSL_RAW_DATA, $iv);
    // Empêche le XSS (output safe)
    $msg['content'] = htmlspecialchars($decrypted !== false ? $decrypted : '[Erreur de déchiffrement]', ENT_QUOTES, 'UTF-8');
    unset($msg['iv']);
}

echo json_encode(['messages' => $messages]);
exit;
?>

register.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

// Sécurité headers
header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Content-Security-Policy: default-src \'self\';');

if (!empty($_SESSION['user_id'])) {
    header('Location: home.php');
    exit;
}

$error = $_GET['error'] ?? '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // CSRF
    if (!isset($_POST['csrf_token'], $_SESSION['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
        header('Location: register.php?error=Session expirée, veuillez réessayer.');
        exit;
    }
    unset($_SESSION['csrf_token']);

    function sanitize($data) {
        return htmlspecialchars(trim($data), ENT_QUOTES, 'UTF-8');
    }

    $username = sanitize($_POST['username'] ?? '');
    $password = $_POST['password'] ?? '';
    $password_confirm = $_POST['password_confirm'] ?? '';

    // Validation champs
    if (!preg_match('/^[a-zA-Z0-9_]{3,50}$/', $username) || strlen($password) < 4) {
        header('Location: register.php?error=Pseudo ou mot de passe invalide');
        exit;
    }
    if ($password !== $password_confirm) {
        header('Location: register.php?error=Les mots de passe ne correspondent pas');
        exit;
    }

    // Unicité pseudo
    $stmt = $pdo->prepare('SELECT id FROM users WHERE LOWER(username) = LOWER(?)');
    $stmt->execute([$username]);
    if ($stmt->fetch()) {
        header('Location: register.php?error=Ce pseudo existe déjà');
        exit;
    }

    // Hash password
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    // Génération clé chiffrement (256 bits)
    try {
        $encryption_key = base64_encode(random_bytes(32));
    } catch (Exception $e) {
        header('Location: register.php?error=Erreur génération clé');
        exit;
    }

    // Insertion utilisateur
    $stmt = $pdo->prepare('INSERT INTO users (username, password, encryption_key) VALUES (?, ?, ?)');
    try {
        $stmt->execute([$username, $hashedPassword, $encryption_key]);
        session_regenerate_id(true);
        $_SESSION['user_id'] = $pdo->lastInsertId();
        $_SESSION['username'] = $username;
        header('Location: home.php');
        exit;
    } catch (Exception $e) {
        header('Location: register.php?error=Erreur lors de l\'inscription');
        exit;
    }
}

// Génération d’un nouveau token CSRF
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Xion – Inscription</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="assets/xion-auth.css">
</head>
<body>
<div class="xion-auth-container">
    <div class="xion-auth-panel">
        <h1 class="xion-auth-title">Xion</h1>
        <h2 class="xion-auth-subtitle">S’inscrire</h2>
        <?php if (isset($error) && $error): ?>
        <div class="xion-auth-error"><?= htmlspecialchars($error) ?></div>
        <?php endif; ?>
        <form method="post" autocomplete="off">
            <input type="hidden" name="csrf_token" value="<?= htmlspecialchars($_SESSION['csrf_token']) ?>">
            <div class="xion-auth-input-group">
                <span class="xion-auth-icon">
                    <svg width="22" height="22" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="7" r="4"/><path d="M17 19a6 6 0 0 0-12 0"/></svg>
                </span>
                <input type="text" name="username" placeholder="Pseudo" autocomplete="username" required>
            </div>
            <div class="xion-auth-input-group">
                <span class="xion-auth-icon">
                    <svg width="22" height="22" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="10" width="16" height="9" rx="2"/><path d="M7 10V7a4 4 0 0 1 8 0v3"/></svg>
                </span>
                <input type="password" name="password" placeholder="Mot de passe" autocomplete="new-password" required>
            </div>
            <div class="xion-auth-input-group">
                <span class="xion-auth-icon">
                    <svg width="22" height="22" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="10" width="16" height="9" rx="2"/><path d="M7 10V7a4 4 0 0 1 8 0v3"/></svg>
                </span>
                <input type="password" name="password_confirm" placeholder="Confirmer mot de passe" autocomplete="new-password" required>
            </div>
            <button class="xion-auth-btn" type="submit">S’inscrire</button>
        </form>
        <div class="xion-auth-hint">
            <span class="xion-auth-icon">
                <svg width="20" height="20" fill="none" stroke="#8b949e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="10 2 2 7 2 17 10 22 18 17 18 7 10 2"/><path d="M10 13v-3"/></svg>
            </span>
            <span>Une clé de chiffrement sera générée pour protéger votre compte</span>
        </div>
        <div style="margin-top:1.5em;">
            <a href="login.php" class="xion-nav-link">Déjà inscrit ? Connexion</a>
        </div>
    </div>
</div>
</body>
</html>

send_message.php

<?php
session_start([
    'cookie_httponly' => true,
    'cookie_secure' => !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
    'cookie_samesite' => 'Strict'
]);
require_once 'includes/db.php';

// HTTP headers sécurité
header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('Content-Security-Policy: default-src \'none\';');

// Vérification authentification stricte
if (empty($_SESSION['user_id'])) {
    http_response_code(401);
    exit('Non autorisé');
}

// CSRF : token à usage unique, nouvelle génération après chaque envoi
if (
    empty($_POST['csrf_token']) ||
    empty($_SESSION['csrf_token']) ||
    !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])
) {
    http_response_code(403);
    exit('CSRF invalide');
}
unset($_SESSION['csrf_token']);

$user_id = $_SESSION['user_id'];
$contact_username = trim($_POST['to'] ?? '');
$plaintext = trim($_POST['message'] ?? '');

// Validation stricte
if (!$contact_username || !$plaintext || mb_strlen($plaintext) > 2000) {
    http_response_code(400);
    exit('Entrée invalide');
}

// Vérification que le destinataire est bien dans la liste des contacts (anti-spam)
$stmt = $pdo->prepare('SELECT u.id, u.encryption_key FROM users u JOIN contacts c ON u.id = c.contact_id WHERE u.username = ? AND c.user_id = ?');
$stmt->execute([$contact_username, $user_id]);
$contact = $stmt->fetch(PDO::FETCH_ASSOC);
if (!$contact) {
    http_response_code(403);
    exit('Destinataire non autorisé');
}
$contact_id = $contact['id'];
$key = base64_decode($contact['encryption_key']);
if (strlen($key) !== 32) {
    http_response_code(500);
    exit('Clé de chiffrement invalide');
}

// Génère IV aléatoire, jamais réutilisé
$iv = random_bytes(16);

// Chiffre le message
$ciphertext = openssl_encrypt($plaintext, 'AES-256-CBC', $key, OPENSSL_RAW_DATA, $iv);
if ($ciphertext === false) {
    http_response_code(500);
    exit('Erreur de chiffrement');
}

// Encode pour stockage
$ciphertext_b64 = base64_encode($ciphertext);
$iv_b64 = base64_encode($iv);

// Insertion SQL stricte, logs en cas d’échec
$stmt = $pdo->prepare('INSERT INTO messages (sender_id, receiver_id, content, iv) VALUES (?, ?, ?, ?)');
if (!$stmt->execute([$user_id, $contact_id, $ciphertext_b64, $iv_b64])) {
    error_log("Erreur DB message: " . print_r($pdo->errorInfo(), true));
    http_response_code(500);
    exit('Erreur base de données');
}

// Nouveau token CSRF pour prévenir le double submit
$new_token = bin2hex(random_bytes(32));
$_SESSION['csrf_token'] = $new_token;

// Toujours renvoyer un JSON
header('Content-Type: application/json');
echo json_encode(['csrf_token' => $new_token]);
exit;
?>
